#name: Prod CD Pipeline
#
#on:
#  push:
#    branches:
#      - main
#
#env:
#  AWS_REGION: ap-northeast-2
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    name: Build & Deploy
#    permissions:
#      id-token: write
#      contents: read
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: ${{ env.AWS_REGION }}
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#            **/.gradle
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: ${{ runner.os }}-gradle-
#
#      - name: Build with Gradle
#        run: |
#          chmod +x gradlew
#          ./gradlew clean build -x test
#
#      - name: Test
#        run: ./gradlew test
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Docker build env
#        id: build-env
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ secrets.PROD_ECR_REPOSITORY }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          echo "::set-output name=image_tag_version::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-docker-image
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: ${{ secrets.PROD_TAG }}
#
#      - name: Render ECS Task Definition
#        id: render-task-definition
#        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
#        with:
#          task-definition: ./src/main/resources/concert-prod.json
#          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
#          image: ${{ secrets.PROD_TAG }}
#
#      - name: Deploy to ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
#          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
#          service: ${{ secrets.ECS_CLUSTER_SERVICE_NAME }}
#          wait-for-service-stability: true